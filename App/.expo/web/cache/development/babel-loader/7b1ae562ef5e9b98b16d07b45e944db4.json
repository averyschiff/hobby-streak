{"ast":null,"code":"import * as SQLite from 'expo-sqlite';\nvar db = SQLite.openDatabase('hobby.db');\n\nfunction clearTables() {\n  db.transaction(function (tx) {\n    tx.executeSql(\"DROP TABLE armies\");\n    tx.executeSql(\"DROP TABLE units\");\n    tx.executeSql(\"DROP TABLE models\");\n  });\n}\n\nvar createSampleTable = function createSampleTable(sample, insert, insertArr, callback) {\n  if (sample) {\n    return function (tx, rows) {\n      tx.executeSql(insert, insertArr, callback, function (tx, err) {\n        return alert('error creating sample: ' + err);\n      });\n    };\n  } else return callback;\n};\n\nvar createTable = function createTable(sample, create, insert, insertArr, callback) {\n  db.transaction(function (tx) {\n    tx.executeSql(create, [], createSampleTable(sample, insert, insertArr, callback), function (tx, err) {\n      alert('Error creating table: ' + err);\n    });\n  });\n};\n\nvar testTable = function testTable(select) {\n  db.transaction(function (tx) {\n    tx.executeSql(select, [], function (tx, rows) {\n      console.log(rows);\n    }, function (tx, err) {\n      alert(\"error fetching sample: \" + err);\n    });\n  });\n};\n\nfunction createArmyTable(callback) {\n  var sample = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var createArmies = \"CREATE TABLE IF NOT EXISTS armies \" + \"(id INTEGER \" + \"PRIMARY KEY NOT NULL, \" + \"armyName VARCHAR \" + \"NOT NULL, \" + \"completion REAL \" + \"DEFAULT 0.0 CHECK (completion >= 0.0 AND completion <= 1.0))\";\n  var insertArmy = \"INSERT INTO armies (armyName) values(?)\";\n  var insertArmyArr = [\"sampleArmy\"];\n  createTable(sample, createArmies, insertArmy, insertArmyArr, callback);\n}\n\nfunction testArmyTable() {\n  var selectArmy = \"SELECT * FROM armies\";\n  testTable(selectArmy);\n}\n\nfunction createUnitTable(callback) {\n  var sample = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var createUnits = \"CREATE TABLE IF NOT EXISTS units \" + \"(id INTEGER \" + \"PRIMARY KEY NOT NULL, \" + \"unitName VARCHAR \" + \"NOT NULL, \" + \"completion REAL \" + \"DEFAULT 0.0 CHECK (completion >= 0.0 AND completion <= 1.0), \" + \"army_id INTEGER \" + \"NOT NULL, \" + \"FOREIGN KEY (army_id) \" + \"REFERENCES armies (army_id)\" + \")\";\n  var insertUnit = \"INSERT INTO units (unitName, army_id) values(?, ?)\";\n  var insertUnitArr = [\"Mork's Mighty Mushroom\", 1];\n  createTable(sample, createUnits, insertUnit, insertUnitArr, callback);\n}\n\nfunction testUnitTable() {\n  var selectUnit = \"SELECT * FROM units\";\n  testTable(selectUnit);\n}\n\nfunction createModelTable(callback) {\n  var sample = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var createModels = \"CREATE TABLE IF NOT EXISTS models \" + \"(id INTEGER \" + \"PRIMARY KEY NOT NULL, \" + \"modelName VARCHAR \" + \"NOT NULL, \" + \"completion REAL \" + \"DEFAULT 0.0 CHECK (completion >= 0.0 AND completion <= 1.0), \" + \"army_id INTEGER \" + \"NOT NULL, \" + \"unit_id INTEGER \" + \"NOT NULL, \" + \"FOREIGN KEY (army_id) \" + \"REFERENCES armies (army_id),\" + \"FOREIGN KEY (unit_id) \" + \"REFERENCES units (unit_id)\" + \")\";\n  var insertModel = \"INSERT INTO models (modelName, army_id, unit_id) values(?, ?, ?)\";\n  var insertModelArr = [\"Model 1\", 1, 1];\n  createTable(sample, createModels, insertModel, insertModelArr, callback);\n}\n\nfunction testModelTable() {\n  var selectModel = \"SELECT * FROM models\";\n  testTable(selectModel);\n}\n\nfunction createTaskTable(callback) {\n  var sample = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var createTasks = \"CREATE TABLE IF NOT EXISTS tasks \" + \"(id INTEGER \" + \"PRIMARY KEY NOT NULL, \" + \"task VARCHAR \" + \"NOT NULL, \" + \"complete INTEGER \" + \"DEFAULT 0 CHECK (complete == 0 OR complete == 1), \" + \"army_id INTEGER \" + \"NOT NULL, \" + \"unit_id INTEGER \" + \"NOT NULL, \" + \"model_id INTEGER \" + \"NOT NULL, \" + \"FOREIGN KEY (army_id) \" + \"REFERENCES armies (army_id), \" + \"FOREIGN KEY (unit_id) \" + \"REFERENCES units (unit_id), \" + \"FOREIGN KEY (model_id) \" + \"REFERENCES models (model_id)\" + \")\";\n  var insertTask = \"INSERT INTO tasks (task, army_id, unit_id, model_id) \" + \"values (?, 1, 1, 1), \" + \"(?, 1, 1, 1), \" + \"(?, 1, 1, 1), \" + \"(?, 1, 1, 1), \" + \"(?, 1, 1, 1), \" + \"(?, 1, 1, 1), \" + \"(?, 1, 1, 1), \" + \"(?, 1, 1, 1)\";\n  var insertTaskArr = [\"Unfucked\", \"Built\", \"Primed\", \"Basecoat\", \"Painted\", \"Based\", \"Magnetized\", \"Lacquered\"];\n  createTable(sample, createTasks, insertTask, insertTaskArr, callback);\n}\n\nfunction testTaskTable() {\n  var selectTask = \"SELECT * FROM tasks\";\n  testTable(selectTask);\n}\n\nexport default {\n  createArmyTable: createArmyTable,\n  testArmyTable: testArmyTable,\n  createUnitTable: createUnitTable,\n  testUnitTable: testUnitTable,\n  createModelTable: createModelTable,\n  testModelTable: testModelTable,\n  createTaskTable: createTaskTable,\n  testTaskTable: testTaskTable,\n  clearTables: clearTables\n};","map":{"version":3,"sources":["/home/avery/hobby-streak/App/db/db-init.js"],"names":["SQLite","db","openDatabase","clearTables","transaction","tx","executeSql","createSampleTable","sample","insert","insertArr","callback","rows","err","alert","createTable","create","testTable","select","console","log","createArmyTable","createArmies","insertArmy","insertArmyArr","testArmyTable","selectArmy","createUnitTable","createUnits","insertUnit","insertUnitArr","testUnitTable","selectUnit","createModelTable","createModels","insertModel","insertModelArr","testModelTable","selectModel","createTaskTable","createTasks","insertTask","insertTaskArr","testTaskTable","selectTask"],"mappings":"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","sourcesContent":["import * as SQLite from 'expo-sqlite'\nconst db = SQLite.openDatabase('hobby.db');\n\nfunction clearTables(){\n\tdb.transaction(tx => {\n\t\ttx.executeSql(\"DROP TABLE armies\")\n\t\ttx.executeSql(\"DROP TABLE units\")\n\t\ttx.executeSql(\"DROP TABLE models\")\n\t\t//tx.executeSql(\"DROP TABLE tasks\")\n\t})\n}\n\n\nconst createSampleTable = (sample, insert, insertArr, callback) => {\n\tif (sample){\n\t\treturn (tx, rows) => {\n\t\t\ttx.executeSql(insert,\n\t\t\t\tinsertArr,\n\t\t\t\tcallback,\n\t\t\t\t(tx, err) => alert('error creating sample: ' + err)\n\t\t\t)\n\t\t}\n\t} else return callback\n}\n\nconst createTable = (sample, create, insert, insertArr, callback) => {\n\tdb.transaction(tx => {\n\t\ttx.executeSql(create, \n\t\t\t[], \n\t\t\tcreateSampleTable(sample, insert, insertArr, callback),\n\t\t\t(tx, err) => {\n\t\t\t\talert('Error creating table: ' + err)\n\t\t\t})\n\t})\n} \n\nconst testTable = (select) => {\n\tdb.transaction(tx => {\n\t\ttx.executeSql(select,\n\t\t\t[],\n\t\t\t(tx, rows) => {\n\t\t\t\tconsole.log(rows)\n\t\t\t},\n\t\t\t(tx, err) => {\n\t\t\t\talert(\"error fetching sample: \" + err)\n\t\t\t})\n\t})\n}\n\nfunction createArmyTable(callback, sample=false){\n\tconst createArmies = \n\t\t\"CREATE TABLE IF NOT EXISTS armies \" +\n\t\t\t\"(id INTEGER \" +\n\t\t\t\t\"PRIMARY KEY NOT NULL, \" +\n\t\t\t\"armyName VARCHAR \" +\n\t\t\t\t\"NOT NULL, \" +\n\t\t\t\"completion REAL \" +\n\t\t\t\t\"DEFAULT 0.0 CHECK (completion >= 0.0 AND completion <= 1.0))\"\n\tconst insertArmy = \"INSERT INTO armies (armyName) values(?)\"\n\tconst insertArmyArr = [\"sampleArmy\"]\n\tcreateTable(sample, createArmies, insertArmy, insertArmyArr, callback)\n}\n\nfunction testArmyTable(){\n\tconst selectArmy = \"SELECT * FROM armies\"\n\ttestTable(selectArmy)\n}\n\nfunction createUnitTable(callback,sample=false){\n\tconst createUnits = \n\t\t\"CREATE TABLE IF NOT EXISTS units \" +\n\t\t\t\"(id INTEGER \" +\n\t\t\t\t\"PRIMARY KEY NOT NULL, \" +\n\t\t\t\"unitName VARCHAR \" +\n\t\t\t\t\"NOT NULL, \" +\n\t\t\t\"completion REAL \" +\n\t\t\t\t\"DEFAULT 0.0 CHECK (completion >= 0.0 AND completion <= 1.0), \" +\n\t\t\t\"army_id INTEGER \" +\n\t\t\t\t\"NOT NULL, \" +\n\t\t\t\"FOREIGN KEY (army_id) \" +\n\t\t\t\t\"REFERENCES armies (army_id)\" +\n\t\t\t\")\"\n\tconst insertUnit = \"INSERT INTO units (unitName, army_id) values(?, ?)\"\n\tconst insertUnitArr = [\"Mork's Mighty Mushroom\", 1]\n\tcreateTable(sample, createUnits, insertUnit, insertUnitArr, callback)\n}\n\nfunction testUnitTable(){\n\tconst selectUnit = \"SELECT * FROM units\"\n\ttestTable(selectUnit)\n}\nfunction createModelTable(callback,sample=false){\n\tconst createModels = \n\t\t\"CREATE TABLE IF NOT EXISTS models \" +\n\t\t\t\"(id INTEGER \" +\n\t\t\t\t\"PRIMARY KEY NOT NULL, \" +\n\t\t\t\"modelName VARCHAR \" +\n\t\t\t\t\"NOT NULL, \" +\n\t\t\t\"completion REAL \" +\n\t\t\t\t\"DEFAULT 0.0 CHECK (completion >= 0.0 AND completion <= 1.0), \" +\n\t\t\t\"army_id INTEGER \" +\n\t\t\t\t\"NOT NULL, \" +\n\t\t\t\"unit_id INTEGER \" +\n\t\t\t\t\"NOT NULL, \" +\n\t\t\t\"FOREIGN KEY (army_id) \" +\n\t\t\t\t\"REFERENCES armies (army_id),\" +\n\t\t\t\"FOREIGN KEY (unit_id) \" +\n\t\t\t\t\"REFERENCES units (unit_id)\" +\n\t\t\t\")\"\n\tconst insertModel = \"INSERT INTO models (modelName, army_id, unit_id) values(?, ?, ?)\"\n\tconst insertModelArr = [\"Model 1\", 1, 1]\n\tcreateTable(sample, createModels, insertModel, insertModelArr, callback)\n}\n\nfunction testModelTable(){\n\tconst selectModel = \"SELECT * FROM models\"\n\ttestTable(selectModel)\n}\nfunction createTaskTable(callback,sample=false){\n\tconst createTasks = \n\t\t\"CREATE TABLE IF NOT EXISTS tasks \" +\n\t\t\t\"(id INTEGER \" +\n\t\t\t\t\"PRIMARY KEY NOT NULL, \" +\n\t\t\t\"task VARCHAR \" +\n\t\t\t\t\"NOT NULL, \" +\n\t\t\t\"complete INTEGER \" +\n\t\t\t\t\"DEFAULT 0 CHECK (complete == 0 OR complete == 1), \" +\n\t\t\t\"army_id INTEGER \" +\n\t\t\t\t\"NOT NULL, \" +\n\t\t\t\"unit_id INTEGER \" +\n\t\t\t\t\"NOT NULL, \" +\n\t\t\t\"model_id INTEGER \" +\n\t\t\t\t\"NOT NULL, \" +\n\t\t\t\"FOREIGN KEY (army_id) \" +\n\t\t\t\t\"REFERENCES armies (army_id), \" +\n\t\t\t\"FOREIGN KEY (unit_id) \" +\n\t\t\t\t\"REFERENCES units (unit_id), \" +\n\t\t\t\"FOREIGN KEY (model_id) \" +\n\t\t\t\t\"REFERENCES models (model_id)\" +\n\t\t\t\")\"\n\tconst insertTask = \"INSERT INTO tasks (task, army_id, unit_id, model_id) \"+ \n\t\t\"values (?, 1, 1, 1), \"+\n\t\t\"(?, 1, 1, 1), \"+\n\t\t\"(?, 1, 1, 1), \"+\n\t\t\"(?, 1, 1, 1), \"+\n\t\t\"(?, 1, 1, 1), \"+\n\t\t\"(?, 1, 1, 1), \"+\n\t\t\"(?, 1, 1, 1), \"+\n\t\t\"(?, 1, 1, 1)\"\n\tconst insertTaskArr = [\"Unfucked\", \"Built\", \"Primed\", \"Basecoat\", \"Painted\", \"Based\", \"Magnetized\", \"Lacquered\"]\n\tcreateTable(sample, createTasks, insertTask, insertTaskArr, callback)\n}\n\n\nfunction testTaskTable(){\n\tconst selectTask = \"SELECT * FROM tasks\"\n\ttestTable(selectTask)\n}\n\nexport default {\n\tcreateArmyTable,\n\ttestArmyTable,\n\tcreateUnitTable,\n\ttestUnitTable,\n\tcreateModelTable,\n\ttestModelTable,\n\tcreateTaskTable,\n\ttestTaskTable,\n\tclearTables\n}\n"]},"metadata":{},"sourceType":"module"}