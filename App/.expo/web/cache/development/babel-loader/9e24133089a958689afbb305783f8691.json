{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ActionSheetIOS } from \"react-native-web/dist/index\";\nimport { models, tasks } from \"../db/\";\nvar SET_MODEL = 'SET_MODEL';\nvar SET_TASKS = 'SET_TASKS';\nvar TOGGLE_TASK = 'TOGGLE_TASK';\nvar ADD_TASK = 'ADD_TASK';\nvar REMOVE_TASK = 'REMOVE_TASK';\nvar SET_NOTE = 'SET_NOTE';\nvar DEFAULT_TASKS = [\"Cleaned\", \"Built\", \"Primed\", \"Basecoat\", \"Painted\", \"Based\", \"Magnetized\", \"Lacquered\"];\nexport var setModel = function setModel(model) {\n  return {\n    type: SET_MODEL,\n    model: model\n  };\n};\nexport var setTasks = function setTasks(tasks) {\n  return {\n    type: SET_TASKS,\n    tasks: tasks\n  };\n};\nexport var addTask = function addTask(task) {\n  return {\n    type: ADD_TASK,\n    task: task\n  };\n};\nexport var toggleTask = function toggleTask(task_id, value) {\n  return {\n    type: TOGGLE_TASK,\n    task_id: task_id,\n    value: value\n  };\n};\nexport var removeTask = function removeTask(task_id) {\n  return {\n    type: REMOVE_TASK,\n    task_id: task_id\n  };\n};\nexport var setNote = function setNote(note) {\n  return {\n    type: SET_NOTE,\n    note: note\n  };\n};\nexport var getModel = function getModel(model_id) {\n  return function _callee(dispatch) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(models.getModel(model_id, function (_, _ref) {\n              var rows = _ref.rows;\n              dispatch(setModel(rows.item(0)));\n            }, function (_, err) {\n              alert('Error retrieving model: ' + err);\n            }));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var getTasks = function getTasks(model_id) {\n  return function _callee2(dispatch) {\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(tasks.getTasksByModel(model_id, function (_, _ref2) {\n              var rows = _ref2.rows;\n\n              if (rows['_array'].length == 0) {\n                DEFAULT_TASKS.forEach(function (task) {\n                  dispatch(createTask(task, model_id, 1, 1));\n                });\n              } else {\n                dispatch(setTasks(rows['_array']));\n              }\n            }, function (_, err) {\n              alert('Error retrieving tasks: ' + err);\n            }));\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var createTask = function createTask(taskName, model_id, unit_id, army_id) {\n  return function _callee3(dispatch) {\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(tasks.newTask(taskName, model_id, unit_id, army_id, function (_, _ref3) {\n              var insertId = _ref3.insertId;\n              dispatch(addTask({\n                id: insertId,\n                task: taskName,\n                complete: 0\n              }));\n            }, function (_, err) {\n              alert('Error creating task: ' + err);\n            }));\n\n          case 2:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var updateTask = function updateTask(task_id, value) {\n  return function _callee4(dispatch) {\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            if (!value) {\n              _context4.next = 5;\n              break;\n            }\n\n            _context4.next = 3;\n            return _regeneratorRuntime.awrap(tasks.updateTaskTrue(task_id, function (_, rows) {\n              dispatch(toggleTask(task_id, value));\n            }, function (_, err) {\n              alert('Error updating task: ' + err);\n            }));\n\n          case 3:\n            _context4.next = 7;\n            break;\n\n          case 5:\n            _context4.next = 7;\n            return _regeneratorRuntime.awrap(tasks.updateTaskFalse(task_id, function (_, rows) {\n              dispatch(toggleTask(task_id, value));\n            }, function (_, err) {\n              alert('Error updating task: ' + err);\n            }));\n\n          case 7:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var deleteTask = function deleteTask(task_id) {\n  return function _callee5(dispatch) {\n    return _regeneratorRuntime.async(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return _regeneratorRuntime.awrap(tasks.deleteTask(task_id, function (_, rows) {\n              dispatch(removeTask(task_id));\n            }, function (_, err) {\n              alert('Error deleting task: ') + err;\n            }));\n\n          case 2:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var updateNote = function updateNote(note, model_id) {\n  return _regeneratorRuntime.async(function updateNote$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return _regeneratorRuntime.awrap(models.updateModelNote(note, model_id, null, function (_, err) {\n            alert('Error updating note: ') + err;\n          }));\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nvar initialModel = {\n  model: {},\n  tasks: [],\n  progress: 0\n};\nexport default function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialModel;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var newProgress = 0;\n  var oldLength = state.tasks.length;\n\n  switch (action.type) {\n    case SET_MODEL:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        model: action.model\n      });\n\n    case SET_TASKS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tasks: action.tasks.map(function (task) {\n          if (task.complete) newProgress++;\n          return _objectSpread(_objectSpread({}, task), {}, {\n            complete: task.complete == 0 ? false : true\n          });\n        }),\n        progress: newProgress / action.tasks.length\n      });\n\n    case ADD_TASK:\n      newProgress = state.progress * oldLength / (oldLength + 1);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tasks: [].concat(_toConsumableArray(state.tasks), [action.task]),\n        progress: newProgress\n      });\n\n    case TOGGLE_TASK:\n      if (action.value) newProgress = state.progress + 1 / state.tasks.length;else newProgress = state.progress - 1 / state.tasks.length;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tasks: state.tasks.map(function (task) {\n          if (task.id == action.task_id) {\n            return _objectSpread(_objectSpread({}, task), {}, {\n              complete: action.value\n            });\n          } else return task;\n        }),\n        progress: newProgress\n      });\n\n    case REMOVE_TASK:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tasks: state.tasks.filter(function (task) {\n          if (task.id != action.task_id) {\n            if (task.complete) newProgress++;\n            return true;\n          } else {\n            return false;\n          }\n        }),\n        progress: oldLength > 1 ? newProgress / (oldLength - 1) : 0\n      });\n\n    case SET_NOTE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        model: _objectSpread(_objectSpread({}, state.model), {}, {\n          note: action.note\n        })\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/avery/hobby-streak/App/store/singleModel.js"],"names":["ActionSheetIOS","models","tasks","SET_MODEL","SET_TASKS","TOGGLE_TASK","ADD_TASK","REMOVE_TASK","SET_NOTE","DEFAULT_TASKS","setModel","model","type","setTasks","addTask","task","toggleTask","task_id","value","removeTask","setNote","note","getModel","model_id","dispatch","_","rows","item","err","alert","getTasks","getTasksByModel","length","forEach","createTask","taskName","unit_id","army_id","newTask","insertId","id","complete","updateTask","updateTaskTrue","updateTaskFalse","deleteTask","updateNote","updateModelNote","initialModel","progress","state","action","newProgress","oldLength","map","filter"],"mappings":"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","sourcesContent":["import { ActionSheetIOS } from \"react-native\"\nimport {models, tasks} from \"../db/\"\n\nconst SET_MODEL = 'SET_MODEL'\nconst SET_TASKS = 'SET_TASKS'\nconst TOGGLE_TASK = 'TOGGLE_TASK'\nconst ADD_TASK = 'ADD_TASK'\nconst REMOVE_TASK = 'REMOVE_TASK'\nconst SET_NOTE = 'SET_NOTE'\n\nconst DEFAULT_TASKS = [\n\t\"Cleaned\", \n\t\"Built\", \n\t\"Primed\", \n\t\"Basecoat\", \n\t\"Painted\", \n\t\"Based\", \n\t\"Magnetized\", \n\t\"Lacquered\",\n]\n\nexport const setModel = (model) => ({\n\ttype: SET_MODEL,\n\tmodel\n})\n\nexport const setTasks = (tasks) => ({\n\ttype: SET_TASKS,\n\ttasks\n})\n\nexport const addTask = (task) => ({\n\ttype: ADD_TASK,\n\ttask\n})\n\nexport const toggleTask = (task_id, value) => ({\n\ttype: TOGGLE_TASK,\n\ttask_id,\n\tvalue\n})\n\nexport const removeTask = (task_id) => ({\n\ttype: REMOVE_TASK,\n\ttask_id,\n})\n\nexport const setNote = (note) => ({\n\ttype: SET_NOTE,\n\tnote\n})\n\nexport const getModel = (model_id) => {\n\treturn async dispatch => {\n\t\tawait models.getModel(model_id,\n\t\t\t(_, {rows}) => {\n\t\t\t\tdispatch(setModel(rows.item(0)))\n\t\t\t},\n\t\t\t(_, err)=> {alert('Error retrieving model: ' + err)}\n\t\t)\n\t}\n}\n\nexport const getTasks = (model_id) => {\n\treturn async dispatch => {\n\t\tawait tasks.getTasksByModel(model_id,\n\t\t\t(_, {rows}) => {\n\t\t\t\tif(rows['_array'].length==0){\n\t\t\t\t\t//create default tasks\n\t\t\t\t\tDEFAULT_TASKS.forEach(task=>{\n\t\t\t\t\t\tdispatch(createTask(task, model_id, 1, 1))\n\t\t\t\t\t})\n\t\t\t\t}else{\n\t\t\t\t\tdispatch(setTasks(rows['_array']))\n\t\t\t\t}\n\t\t\t},\n\t\t\t(_, err) => {alert('Error retrieving tasks: ' + err)}\n\t\t)\n\t}\n}\n\nexport const createTask = (taskName, model_id, unit_id, army_id) => {\n\treturn async dispatch => {\n\t\tawait tasks.newTask(taskName, model_id, unit_id, army_id,\n\t\t\t(_, {insertId}) => {\n\t\t\t\tdispatch(addTask({\n\t\t\t\t\tid: insertId, \n\t\t\t\t\ttask: taskName, \n\t\t\t\t\tcomplete: 0\n\t\t\t\t}))\n\t\t\t},\n\t\t\t(_, err) => {alert('Error creating task: ' + err)}\n\t\t)\n\t}\n}\n\nexport const updateTask = (task_id, value) => {\n\treturn async dispatch => {\n\t\tif (value){\n\t\t\tawait tasks.updateTaskTrue(task_id,\n\t\t\t\t(_, rows) => {\n\t\t\t\t\tdispatch(toggleTask(task_id, value))\n\t\t\t\t},\n\t\t\t\t(_, err) => {alert('Error updating task: ' + err)}\n\t\t\t)\n\t\t}else{\n\t\t\tawait tasks.updateTaskFalse(task_id,\n\t\t\t\t(_, rows) => {\n\t\t\t\t\tdispatch(toggleTask(task_id, value))\n\t\t\t\t},\n\t\t\t\t(_, err) => {alert('Error updating task: ' + err)}\n\t\t\t)\n\t\t}\n\t}\n}\n\nexport const deleteTask = (task_id)=>{\n\treturn async dispatch => {\n\t\tawait tasks.deleteTask(task_id,\n\t\t\t(_, rows) => {\n\t\t\t\tdispatch(removeTask(task_id))\n\t\t\t},\n\t\t\t(_, err) => {alert('Error deleting task: ') + err}\n\t\t)\n\t}\n}\n\nexport const updateNote = async (note, model_id) => {\n\tawait models.updateModelNote(note, model_id,\n\t\tnull,\n\t\t(_, err)=> {alert('Error updating note: ') + err}\n\t)\n}\n\nconst initialModel = {\n\tmodel: {},\n\ttasks: [],\n\tprogress: 0,\n}\n\nexport default function (state=initialModel, action){\n\tlet newProgress = 0\n\tlet oldLength = state.tasks.length\n\tswitch (action.type){\n\t\tcase SET_MODEL:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tmodel: action.model\n\t\t\t}\n\t\tcase SET_TASKS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\ttasks: action.tasks.map(task =>{\n\t\t\t\t\tif (task.complete) newProgress++\n\t\t\t\t\treturn {\n\t\t\t\t\t...task,\n\t\t\t\t\tcomplete: task.complete==0?false:true\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\tprogress: newProgress/action.tasks.length\n\t\t\t}\n\t\tcase ADD_TASK:\n\t\t\tnewProgress = state.progress*oldLength/(oldLength+1)\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\ttasks: [\n\t\t\t\t\t...state.tasks,\n\t\t\t\t\taction.task\n\t\t\t\t],\n\t\t\t\tprogress: newProgress,\n\t\t\t}\n\t\tcase TOGGLE_TASK:\n\t\t\tif (action.value) newProgress = state.progress + 1/state.tasks.length\n\t\t\telse newProgress = state.progress - 1/state.tasks.length\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\ttasks: state.tasks.map(task=>{\n\t\t\t\t\tif (task.id==action.task_id){\n\t\t\t\t\t\treturn {...task, complete: action.value}\n\t\t\t\t\t}else return task\n\t\t\t\t}),\n\t\t\t\tprogress: newProgress\n\t\t\t}\n\t\tcase REMOVE_TASK:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\ttasks: state.tasks.filter(task=>{\n\t\t\t\t\tif (task.id!=action.task_id){\n\t\t\t\t\t\tif (task.complete) newProgress++\n\t\t\t\t\t\treturn true\n\t\t\t\t\t}else{\n\t\t\t\t\t\treturn false\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\tprogress: oldLength>1?newProgress/(oldLength-1):0\n\t\t\t}\n\t\tcase SET_NOTE:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tmodel: {\n\t\t\t\t\t...state.model,\n\t\t\t\t\tnote: action.note\n\t\t\t\t}\n\t\t\t}\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}